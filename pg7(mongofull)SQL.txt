DATABASE MANAGEMENT SYSTEM.
DATABASE MANAGEMENT SYSTEM
BCS403
BCS403
macOS
bash
brew services start mongodb-community
macOS
bash
brew services start mongodb-community
3. Connect to MongoDB
bash
3. Connect to MongoDB
bash
mongo
mongo
4._basicUisuyUperauons
<2.
4. Basic CRUD Operations
Launch the MongoDB shell to perform basic CRUD operations.
mongosh
sv
1ongosh
«---NgODB shell to perform basic CRUD operations.
Switch to a Database (Optional):
If you want to use a specific database, switch to that database using the use command. If the
database doesn’t exist, MongoDB will create it implicitly when you insert data into it
Switch to a Database (Optional):
If you want to use a specific database, switch to that database using the use command. If the
database doesn’t exist, MongoDB will create it implicitly when you insert data into it:
use bookDB
switched to db bookDB
43
DEPT. OF CSE-Al & ML. ATMECE, MYSURU,
DEPT. OF CSE-AI & ML, ATMECE, MYSURU
switched to db bookDB

DATABASE MANAGEMENT SYSTEM
BCS403
test: use bookDB
switched to db bookDB
bookOB> db.createCollection(é
Create the ProgrammingBooks Collection:
To create the ProgrammingBooks collection, use the createCollection() method. This step is
optional because MongoDB will automatically create the collection when you insert data into it, but
you can explicitly create it if needed:
db.createCollection(
INSERT operations
a. Insert 5 Documents into the ProgrammingBooks Collection :
Now, insert 5 documents representing programming books into the ProgrammingBooks collection
using the insertMany () method:
db.ProgrammingBooks.insertmanye([
title:
author:
ams8)
Toe
title:
author:
categor
Toe
ohane
Fheite)oe
catego
a
title:
Fheite)oe
category:
title:
Thafe)ae
catego
year:
Insert a Single Document into ProgrammingBooks:
44
DEPT. OF CSE-AI & ML, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
Use the insertOne() method to insert a new document into the ProgrammingBooks collection:
db.ProgrammingBooks.insertOne({
title: "The Pragmatic Programmer: Your Journey to Mastery",
author: "David Thomas, Andrew Hunt",
category: "Software Development",
year: 1999})
Read (Query) Operations
a. Find All Documents
To retrieve all documents from the ProgrammingBooks collection:
db.ProgrammingBooks.find(). pretty ()
45
Dept. of CSE, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
46
DEPT. OF CSE-AI & ML, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
Find Documents Matching a Condition
To find books published after the year 2000:
db.ProgrammingBooks.find({year: { $gt: 2000 } }). pretty ()
Dears
2000 } }).pretty()
Update Operations
a. Update a Single Document
To update a specific book (e.g., change the author of a book):
db.ProgrammingBooks.updateOne(
{ title: "Clean Code: A Handbook of Agile Software Craftsmanship" },
{ $set: { author: "Robert C. Martin (Uncle Bob)" } }
)
//verify by displaying books published in year 2008
db.ProgrammingBooks.find({ year: { $eq: 2008 } }).pretty()
47
DEPT. OF CSE-AI & ML, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
ErarEe Ty
eet
eeeeE
cea erty
creragictrd
Pecans
CeaLt
aa76)
objectId(
res
ry
ay
Update Multiple Documents
To update multiple books (e.g., update the category of books published before 2010):
db.ProgrammingBooks.updateMany
48
DEPT. OF CSE-AI & ML, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
acknowledged: true
ertediId: null,
+) .pretty()
Delete Operations
a. Delete a Single Document
To delete a specific book from the collection (e.g., delete a book by title):
db.ProgrammingBooks.deleteOne({ title: "JavaScript: The Good Parts" })
{ acknowledged: true, deletedCount: 1 }
falas Darel =Aae-M4=1ele] eee |=a1a
nowledged: true, deletedCount:
49
DEPT. OF CSE-AI & ML, ATMECE, MYSURU

DATABASE MANAGEMENT SYSTEM
BCS403
You can check whether the specified document is deleted by displaying the contents of the
collection.
b. Delete Multiple Documents
To delete multiple books based on a condition (e.g., delete all books published before 1995):
db.ProgrammingBooks.deleteMany({ year: { $lt: 1995 } })
{ acknowledged: true, deletedCount: 2 }
ueoe
rotateTeeie
You can check whether the specified documents were deleted by displaying the contents of the
collection.
c. Delete All Documents in the Collection:
To delete all documents in a collection (e.g., ProgrammingBooks), use the deleteMany() method
with an empty filter {}:
db.ProgrammingBooks.deleteMany({})
db .ProgranmingBooks .deletetar
eisiees-tertaras
//verify by displaying the collection
db.ProgrammingBooks.find().pretty()
Delete the Collection Using drop():
To delete a collection named ProgrammingBooks, use the drop() method with the name of the
collection:
ES ecle
EmercasKs
50
DEPT. OF CSE-AI & ML, ATMECE, MYSURU
